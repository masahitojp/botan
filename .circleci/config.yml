version: 2
workflows:
  version: 2
  test:
    jobs:
      - java-8
      - java-9
      - java-10
jobs:
  java-8: &test-template
    docker:
    - image: circleci/openjdk:8-jdk
    working_directory: ~/masahitojp/botan-core
    parallelism: 1
    shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    working_directory: ~/masahitojp/botan-core 
    steps:
    - checkout
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    # Dependencies
    #   This would typically go in either a build or a build-and-test job when using workflows
    # Restore the dependency cache
    # This is based on your 1.0 configuration file or project settings
    - run: cp gradle.properties.sample gradle.properties
    - restore_cache:
        key: jars-{{ checksum "build.gradle" }}-{{ checksum  "build.gradle" }}
    # This is based on your 1.0 configuration file or project settings
    - run: ./gradlew dependencies
    # Save dependency cache
    - save_cache:
        key: jars-{{ checksum "build.gradle" }}-{{ checksum  "build.gradle" }}
        paths:
        - ~/masahitojp/botan-core/.gradle
    # Test
    - run: if [ -a ./gradlew ]; then ./gradlew test; else ./gradle test; fi
    # Teardown
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results
  java-9:
    <<: *test-template
    docker:
      - image: circleci/openjdk:9-jdk
  java-10:
    <<: *test-template
    docker:
      - image: circleci/openjdk:10-jdk
